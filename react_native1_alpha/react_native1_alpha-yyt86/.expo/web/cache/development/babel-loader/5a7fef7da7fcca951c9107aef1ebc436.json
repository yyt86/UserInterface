{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"F:\\\\course\\\\639-UI\\\\react_native2_alpha-yyt86-main\\\\TimePicker.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport moment from \"moment\";\n\nvar TimePicker = function TimePicker(props) {\n  var _useState = useState(new Date()),\n      _useState2 = _slicedToArray(_useState, 2),\n      date = _useState2[0],\n      setDate = _useState2[1];\n\n  var _useState3 = useState('date'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      mode = _useState4[0],\n      setMode = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      show = _useState6[0],\n      setShow = _useState6[1];\n\n  useEffect(function () {\n    setDate(new Date(props.date));\n  }, [new Date(props.date)]);\n\n  var onChange = function onChange(event, selectedDate) {\n    var currentDate = selectedDate || date;\n    setShow(Platform.OS === 'ios');\n    setDate(currentDate);\n    props.getDateTime(currentDate);\n  };\n\n  var showMode = function showMode(currentMode) {\n    setShow(true);\n    setMode(currentMode);\n  };\n\n  var showDatepicker = function showDatepicker() {\n    showMode('date');\n  };\n\n  var showTimepicker = function showTimepicker() {\n    showMode('time');\n  };\n\n  return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      flexWrap: 'wrap'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, date.toISOString()), React.createElement(View, {\n    style: styles.spaceHorizontal,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 14\n    }\n  })), React.createElement(View, {\n    style: styles.spaceSmall,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 8\n    }\n  }), React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      flexWrap: 'wrap'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, React.createElement(Button, {\n    color: \"#942a21\",\n    style: styles.buttonInline,\n    onPress: showDatepicker,\n    title: \"SET DATA\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 10\n    }\n  }), React.createElement(View, {\n    style: styles.spaceHorizontal,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 10\n    }\n  }), React.createElement(Button, {\n    color: \"#942a21\",\n    style: styles.buttonInline,\n    onPress: showTimepicker,\n    title: \"SET TIME\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  })), show && React.createElement(DateTimePicker, {\n    testID: \"dateTimePicker\",\n    value: date,\n    mode: mode,\n    is24Hour: true,\n    display: \"default\",\n    onChange: onChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  buttonInline: {\n    display: \"flex\"\n  },\n  spaceSmall: {\n    width: 20,\n    height: 10\n  },\n  spaceHorizontal: {\n    display: \"flex\",\n    width: 20\n  }\n});\nexport default TimePicker;","map":{"version":3,"sources":["F:/course/639-UI/react_native2_alpha-yyt86-main/TimePicker.js"],"names":["React","useState","useEffect","DateTimePicker","moment","TimePicker","props","Date","date","setDate","mode","setMode","show","setShow","onChange","event","selectedDate","currentDate","Platform","OS","getDateTime","showMode","currentMode","showDatepicker","showTimepicker","flexDirection","flexWrap","toISOString","styles","spaceHorizontal","spaceSmall","buttonInline","StyleSheet","create","display","width","height"],"mappings":"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","sourcesContent":["import React, {useState, useEffect}  from 'react';\r\nimport {View, Button, Platform, StyleSheet, Text} from 'react-native';\r\nimport DateTimePicker from '@react-native-community/datetimepicker';\r\nimport moment from \"moment\";\r\n\r\n// class TimePicker extends React.Component {\r\n//     constructor(props){\r\n//         super(props);\r\n//         this.state = {\r\n//           //  date:  new Date(Date.parse(moment(this.props.date).format(\r\n//           //       'ddd MMM DD YYYY HH:mm:ss ZZ',))),//this.props.date,\r\n//           date: this.props.date,\r\n//            mode: 'date',\r\n//            show: false,\r\n//         }\r\n//         // this.getDateTime = this.getDateTime.bind(this);\r\n//      }\r\n  \r\n//     onChange = (event, selectedDate) => {\r\n//       let currentDate = selectedDate || this.state.date;\r\n//       this.setState({show: Platform.OS === 'android' ? true : false}),\r\n//       this.setState({date: currentDate});\r\n//       this.props.getDateTime(currentDate);\r\n\r\n//       console.log(currentDate, \"currentdate\")\r\n//     //   this.props.getDate(currentDate);\r\n//     };\r\n\r\n//     showMode = (currentMode) => {\r\n//         this.setState({show: true});\r\n//         this.setState({mode: currentMode});\r\n//     };\r\n  \r\n//     showDatepicker = () => {\r\n//       this.showMode('date');\r\n//     };\r\n  \r\n//     showTimepicker = () => {\r\n//       this.showMode('time');\r\n//     };\r\n\r\n//   // componentDidMount() {\r\n//   //   this.setState({date:new Date(this.props.date)})\r\n//   // }\r\n   \r\n//   render(){\r\n//     const {show, date, mode} = this.state;\r\n//     // console.log(this.props.date, \"time picker props\")\r\n//     // console.log(date, \"time picker state\")\r\n//     // console.log(typeof Date.parse(date), \"current date\")\r\n//     return (\r\n//        <View>\r\n//        <View style={{ flexDirection: 'row', flexWrap: 'wrap' }}>\r\n//               <Text>{moment(date).format('YYYY-MM-DD')}</Text>\r\n//               {/* <Text>{date.toISOString()}</Text> */}\r\n//               <View style={styles.spaceHorizontal} />\r\n//               <Text>{moment(date).format('h:mm:ss a')}</Text>\r\n//         </View>\r\n//         <View style={styles.spaceSmall}></View>\r\n//       <View style={{ flexDirection: 'row', flexWrap: 'wrap' }}>\r\n//         <Button color=\"#942a21\" style={styles.buttonInline} onPress={this.showDatepicker} title=\"SET DATA\" />\r\n//         <View style={styles.spaceHorizontal} />\r\n//         <Button color=\"#942a21\" style={styles.buttonInline} onPress={this.showTimepicker} title=\"SET TIME\" />\r\n        \r\n//         {show && (\r\n//           <DateTimePicker\r\n//             testID=\"dateTimePicker\"\r\n//             value={Date.parse(date)}\r\n//             mode={mode}\r\n//             is24Hour={true}\r\n//             display=\"default\"\r\n//             onChange={this.onChange}\r\n//           />\r\n//         )}\r\n//       </View>\r\n    \r\n//         </View> \r\n//     );\r\n//     }\r\n//   };\r\n\r\n//   const styles = StyleSheet.create({\r\n//     buttonInline: {\r\n//         display: \"flex\"\r\n//       },\r\n//       spaceSmall: {\r\n//         width: 20,\r\n//         height: 10,\r\n//       },\r\n//       spaceHorizontal: {\r\n//         display: \"flex\",\r\n//         width: 20\r\n//       },\r\n//   });\r\n\r\n//   export default TimePicker;\r\n\r\nconst TimePicker = (props) => {\r\n  const [date, setDate] = useState(new Date());\r\n  const [mode, setMode] = useState('date');\r\n  const [show, setShow] = useState(false);\r\n\r\n  useEffect(\r\n    () => {\r\n      setDate(new Date(props.date));\r\n    },\r\n    [new Date(props.date)],\r\n  );\r\n \r\n  const onChange = (event, selectedDate) => {\r\n    const currentDate = selectedDate || date;\r\n    setShow(Platform.OS === 'ios');\r\n    setDate(currentDate);\r\n    props.getDateTime(currentDate)\r\n    // console.log(props.date, \"time picker props\")\r\n    // console.log(selectedDate, \"time picker state\")\r\n  };\r\n \r\n  const showMode = (currentMode) => {\r\n    setShow(true);\r\n    setMode(currentMode);\r\n    \r\n  };\r\n \r\n  const showDatepicker = () => {\r\n    showMode('date');\r\n  };\r\n \r\n  const showTimepicker = () => {\r\n    showMode('time');\r\n  };\r\n // , this.props.getDateTime(this.state.date)\r\n  return (\r\n    <View>\r\n      <View style={{ flexDirection: 'row', flexWrap: 'wrap' }}>\r\n      <Text>{date.toISOString()}</Text>\r\n             {/* <Text>{moment(date).format(\"MMM Do YY\")}</Text> */}\r\n             <View style={styles.spaceHorizontal} />\r\n             {/* <Text>{moment(date).format('h:mm:ss a')}</Text> */}\r\n        </View>\r\n       <View style={styles.spaceSmall}></View>\r\n      <View style={{ flexDirection: 'row', flexWrap: 'wrap' }}>\r\n         <Button color=\"#942a21\" style={styles.buttonInline} onPress={showDatepicker} title=\"SET DATA\" />\r\n         <View style={styles.spaceHorizontal} />\r\n        <Button color=\"#942a21\" style={styles.buttonInline} onPress={showTimepicker} title=\"SET TIME\" />\r\n        </View>\r\n      {show && (\r\n        <DateTimePicker\r\n          testID=\"dateTimePicker\"\r\n          value={date}\r\n          mode={mode}\r\n          is24Hour={true}\r\n          display=\"default\"\r\n          onChange={onChange}\r\n        />\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\n  const styles = StyleSheet.create({\r\n    buttonInline: {\r\n        display: \"flex\"\r\n      },\r\n      spaceSmall: {\r\n        width: 20,\r\n        height: 10,\r\n      },\r\n      spaceHorizontal: {\r\n        display: \"flex\",\r\n        width: 20\r\n      },\r\n  });\r\n\r\nexport  default TimePicker;"]},"metadata":{},"sourceType":"module"}