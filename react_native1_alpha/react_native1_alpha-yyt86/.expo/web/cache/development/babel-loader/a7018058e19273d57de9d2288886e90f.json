{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"F:\\\\course\\\\639-UI\\\\react_native2_alpha-yyt86-main\\\\TimePicker.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport moment from \"moment\";\n\nvar TimePicker = function (_React$Component) {\n  _inherits(TimePicker, _React$Component);\n\n  var _super = _createSuper(TimePicker);\n\n  function TimePicker(props) {\n    var _this;\n\n    _classCallCheck(this, TimePicker);\n\n    _this = _super.call(this, props);\n\n    _this.onChange = function (event, selectedDate) {\n      var currentDate = selectedDate || _this.state.date;\n      _this.setState({\n        show: Platform.OS === 'ios' ? true : false\n      }), _this.setState({\n        date: currentDate\n      });\n\n      _this.props.getDateTime(currentDate);\n    };\n\n    _this.showMode = function (currentMode) {\n      _this.setState({\n        show: true\n      });\n\n      _this.setState({\n        mode: currentMode\n      });\n    };\n\n    _this.showDatepicker = function () {\n      _this.setState({\n        show: true\n      });\n\n      _this.setState({\n        mode: 'date'\n      });\n    };\n\n    _this.showTimepicker = function () {\n      _this.setState({\n        show: true\n      });\n\n      _this.setState({\n        mode: 'date'\n      });\n    };\n\n    _this.state = {\n      date: _this.props.date,\n      mode: 'date',\n      show: false\n    };\n    return _this;\n  }\n\n  _createClass(TimePicker, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          show = _this$state.show,\n          date = _this$state.date,\n          mode = _this$state.mode;\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 8\n        }\n      }, React.createElement(View, {\n        style: {\n          flexDirection: 'row',\n          flexWrap: 'wrap'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 8\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 15\n        }\n      }, moment(date).format('YYYY-MM-DD')), React.createElement(View, {\n        style: styles.spaceHorizontal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }\n      }), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }\n      }, moment(date).format('h:mm:ss a'))), React.createElement(View, {\n        style: styles.spaceSmall,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }\n      }), React.createElement(View, {\n        style: {\n          flexDirection: 'row',\n          flexWrap: 'wrap'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 7\n        }\n      }, React.createElement(Button, {\n        color: \"#942a21\",\n        style: styles.buttonInline,\n        onPress: this.showDatepicker,\n        title: \"SET DATA\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }\n      }), React.createElement(View, {\n        style: styles.spaceHorizontal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }\n      }), React.createElement(Button, {\n        color: \"#942a21\",\n        style: styles.buttonInline,\n        onPress: this.showTimepicker,\n        title: \"SET TIME\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }\n      }), show ? React.createElement(DateTimePicker, {\n        testID: \"dateTimePicker\",\n        value: Date.parse(date),\n        mode: mode,\n        is24Hour: true,\n        display: \"default\",\n        onChange: this.onChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }\n      }) : React.createElement(React.Fragment, null)));\n    }\n  }]);\n\n  return TimePicker;\n}(React.Component);\n\n;\nvar styles = StyleSheet.create({\n  buttonInline: {\n    display: \"flex\"\n  },\n  spaceSmall: {\n    width: 20,\n    height: 10\n  },\n  spaceHorizontal: {\n    display: \"flex\",\n    width: 20\n  }\n});\nexport default TimePicker;","map":{"version":3,"sources":["F:/course/639-UI/react_native2_alpha-yyt86-main/TimePicker.js"],"names":["React","useState","useEffect","DateTimePicker","moment","TimePicker","props","onChange","event","selectedDate","currentDate","state","date","setState","show","Platform","OS","getDateTime","showMode","currentMode","mode","showDatepicker","showTimepicker","flexDirection","flexWrap","format","styles","spaceHorizontal","spaceSmall","buttonInline","Date","parse","Component","StyleSheet","create","display","width","height"],"mappings":"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","sourcesContent":["import React, {useState, useEffect}  from 'react';\r\nimport {View, Button, Platform, StyleSheet, Text} from 'react-native';\r\nimport DateTimePicker from '@react-native-community/datetimepicker';\r\nimport moment from \"moment\";\r\n\r\nclass TimePicker extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n          //  date:  new Date(Date.parse(moment(this.props.date).format(\r\n          //       'ddd MMM DD YYYY HH:mm:ss ZZ',))),//this.props.date,\r\n          date: this.props.date,\r\n           mode: 'date',\r\n           show: false,\r\n        }\r\n        // this.getDateTime = this.getDateTime.bind(this);\r\n     }\r\n  \r\n    onChange = (event, selectedDate) => {\r\n      let currentDate = selectedDate || this.state.date;\r\n      this.setState({show: Platform.OS === 'ios' ? true : false}),\r\n      this.setState({date: currentDate});\r\n      this.props.getDateTime(currentDate);\r\n\r\n      // console.log(currentDate, \"currentdate\")\r\n    //   this.props.getDate(currentDate);\r\n    // console.log(Platform.OS === 'android')\r\n    };\r\n\r\n    showMode = (currentMode) => {\r\n        this.setState({show: true});\r\n        this.setState({mode: currentMode});\r\n    };\r\n  \r\n    showDatepicker = () => {\r\n      // this.showMode('date');\r\n      this.setState({show: true});\r\n        this.setState({mode: 'date'});\r\n    };\r\n  \r\n    showTimepicker = () => {\r\n      // this.showMode('time');\r\n      this.setState({show: true});\r\n        this.setState({mode: 'date'});\r\n    };\r\n\r\n  // componentDidMount() {\r\n  //   this.setState({date:new Date(this.props.date)})\r\n  // }\r\n   \r\n  render(){\r\n    const {show, date, mode} = this.state;\r\n    // console.log(this.props.date, \"time picker props\")\r\n    // console.log(date, \"time picker state\")\r\n    // console.log(typeof Date.parse(date), \"current date\")\r\n    return (\r\n       <View>\r\n       <View style={{ flexDirection: 'row', flexWrap: 'wrap' }}>\r\n              <Text>{moment(date).format('YYYY-MM-DD')}</Text>\r\n              {/* <Text>{date.toISOString()}</Text> */}\r\n              <View style={styles.spaceHorizontal} />\r\n              <Text>{moment(date).format('h:mm:ss a')}</Text>\r\n        </View>\r\n        <View style={styles.spaceSmall}></View>\r\n      <View style={{ flexDirection: 'row', flexWrap: 'wrap' }}>\r\n        <Button color=\"#942a21\" style={styles.buttonInline} onPress={this.showDatepicker} title=\"SET DATA\" />\r\n        <View style={styles.spaceHorizontal} />\r\n        <Button color=\"#942a21\" style={styles.buttonInline} onPress={this.showTimepicker} title=\"SET TIME\" />\r\n        \r\n        {show ? (\r\n          <DateTimePicker\r\n            testID=\"dateTimePicker\"\r\n            value={Date.parse(date)}\r\n            mode={mode}\r\n            is24Hour={true}\r\n            display=\"default\"\r\n            onChange={this.onChange}\r\n          />\r\n        ): <></>}\r\n      </View>\r\n    \r\n        </View> \r\n    );\r\n    }\r\n  };\r\n\r\n  const styles = StyleSheet.create({\r\n    buttonInline: {\r\n        display: \"flex\"\r\n      },\r\n      spaceSmall: {\r\n        width: 20,\r\n        height: 10,\r\n      },\r\n      spaceHorizontal: {\r\n        display: \"flex\",\r\n        width: 20\r\n      },\r\n  });\r\n\r\n  export default TimePicker;\r\n\r\n// const TimePicker = (props) => {\r\n//   const [date, setDate] = useState('');\r\n//   const [mode, setMode] = useState('date');\r\n//   const [show, setShow] = useState(false);\r\n\r\n//   useEffect(\r\n//     () => {\r\n//       setDate(props.date);\r\n//     },\r\n//     [props.date],\r\n//   );\r\n \r\n//   const onChange = (event, selectedDate) => {\r\n//     const currentDate = selectedDate || date;\r\n//     setShow(Platform.OS === 'ios');\r\n//     setDate(currentDate);\r\n//     props.getDateTime(currentDate)\r\n//     // console.log(props.date, \"time picker props\")\r\n//     // console.log(selectedDate, \"time picker state\")\r\n//   };\r\n \r\n//   const showMode = (currentMode) => {\r\n//     setShow(true);\r\n//     setMode(currentMode);\r\n    \r\n//   };\r\n \r\n//   const showDatepicker = () => {\r\n//     showMode('date');\r\n//   };\r\n \r\n//   const showTimepicker = () => {\r\n//     showMode('time');\r\n//   };\r\n//  // , this.props.getDateTime(this.state.date)\r\n//   return (\r\n//     <View>\r\n//       <View style={{ flexDirection: 'row', flexWrap: 'wrap' }}>\r\n//              <Text>{moment(date).format(\"MMM Do YY\")}</Text>\r\n//              <View style={styles.spaceHorizontal} />\r\n//              <Text>{moment(date).format('h:mm:ss a')}</Text>\r\n//         </View>\r\n//        <View style={styles.spaceSmall}></View>\r\n//       <View style={{ flexDirection: 'row', flexWrap: 'wrap' }}>\r\n//          <Button color=\"#942a21\" style={styles.buttonInline} onPress={showDatepicker} title=\"SET DATA\" />\r\n//          <View style={styles.spaceHorizontal} />\r\n//         <Button color=\"#942a21\" style={styles.buttonInline} onPress={showTimepicker} title=\"SET TIME\" />\r\n//         </View>\r\n//       {show && (\r\n//         <DateTimePicker\r\n//           testID=\"dateTimePicker\"\r\n//           value={Date.parse(date)}\r\n//           mode={mode}\r\n//           is24Hour={true}\r\n//           display=\"default\"\r\n//           onChange={onChange}\r\n//         />\r\n//       )}\r\n//     </View>\r\n//   );\r\n// };\r\n\r\n//   const styles = StyleSheet.create({\r\n//     buttonInline: {\r\n//         display: \"flex\"\r\n//       },\r\n//       spaceSmall: {\r\n//         width: 20,\r\n//         height: 10,\r\n//       },\r\n//       spaceHorizontal: {\r\n//         display: \"flex\",\r\n//         width: 20\r\n//       },\r\n//   });\r\n\r\n// export  default TimePicker;"]},"metadata":{},"sourceType":"module"}